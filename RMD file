## Some text are written in HTML notation for knitting


<span style="color:blue"> 
c() combines arguments to form a vector. A vector only have 1 common type (the type that is returned after the code runs). If there are different classes of elements within the vector, R will convert every argument into the same class.
\span


**creating vectors**
```{r}
myVec <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
myVec + 7
```
<span style="color:blue"> 
R applies the same mathematical operations on every element of a vector.
\span


**trying character vectors**
```{r}
nameVec <- c("Lauren", "Wu", "Tuesday")
```


**trying class() functions**
```{r}
class(myVec)
class(nameVec)
newVec <- c(myVec, nameVec)
class(newVec)
```
<span style="color:blue"> 
When myVec(numeric vector) and nameVec(character) are combined to form newVec, numeric values from myVec are converted into characters.(because a vector can only contain 1 type of elements) Therefore, when the class() function runs, R returns the answer: "character".
\span


**range of numbers saved in a variable**
```{r}
intSeq <- 1:10
numSeq <- intSeq *10
numSeq
```

```{r}
myVec == numSeq
```
<span style="color:blue"> 
R returns 10 TRUEs. R individually compares every element in myVec and numSeq one by one & outputs whether or not they are equal for every one.
\span


**exploring indexing**
```{r}
myVec <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
myVec[1:6]       #access the 1st to 6th elements of myVec
myVec[-3]        #returns myVec minus its 3rd element
myVec[c(1,3,5)]  #returns the 1st, 3rd, and 5th element of myVec
myVec[3] <- 10   #replaces the 3rd element of myVec with 10
```


```{r}
y <- seq(20, 110, 10)
y[3] * y[9]
```


```{r}
myVec <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
for(i in 1:length(myVec)){
  myVec[i]<- myVec[i]*3
}
print(myVec)
```



```{r}
k <- 1
odd <- numeric(length(k))
for(i in 1:15){
  if (i%%2 == 1 || i ==12){
    odd[k] <- i
    k <- k+1
  }
}
odd <- odd[1:k-1]
odd
```


**exploring matrices** 
```{r}
test <- 1:12
dim(test) <- c(2, 6)

test[1,5]
```



```{r}
test[, c(1,3,5)]
```


**exploring the matrix() function**
```{r}
matrix1 <- matrix(data=1:21, nrow = 4, ncol = 5)
matrix1
```
<span style="color:blue"> 
matrix1 includes numbers from 1-20. Any element beyond them were ignored. R returns a warning that says the data length of the data doesn't match the length of the matrix.
\span


```{r}
matrix2 <- matrix(data=1:17, nrow = 4, ncol = 5)
matrix2
```
<span style="color:blue"> 
After filling in the number 17, R continues to fill in the Matrix from the start of the vector provided for the matrix (1,2,3). R also returns a warning that the data length is not the same as the matrix's length.
\span


```{r}
matrix3 <- matrix(data = 1:4, nrow=2, ncol=2)
for (i in 1:4){
  matrix3 [i] <- matrix3[i]+7
}
matrix3
```


```{r}
matrix4 <- matrix(data = 0, nrow = 5, ncol = 7)
for(i in 1:5){
  for (j in 1:7){
    matrix4[i, j] <- i*j
  }
}
matrix4
```


```{r}
matrix4 <- matrix(data = 0, nrow = 5, ncol = 7)
for(i in 1: nrow(matrix4)){
  for (j in 1:ncol(matrix4)){
    matrix4[i, j] <- i*j
  }
  print(matrix4[i,])
}
```


```{r eval=FALSE}
test%*%test
```
<span style="color:blue"> 
This is not correct matrix multiplication. This is because mathematically, a 2 x 6 matrix can't be multiplied by another 2 x 6 matrix (because the number of columns is not equal to the number of rows)
\span

**exploring list() function**
```{r}
motleyCrew <- list(char = c("a", "b", "c"), num = 1:7, func = sum, logic = TRUE, missing = NA, list = list(one = 1, two = 2, three = 3))

typeVec <- numeric(6)
for (i in 1:6){
  typeVec[i] <- class(motleyCrew[[i]])
}
typeVec
```



```{r}
sad <- names(motleyCrew)
for (i in sad){
  if(i != "func") {
    print(motleyCrew[i])}
}
```



